/*
REF CURSOR :
------------

A REF CURSOR in Oracle SQL is a cursor variable that allows you to pass a cursor as a parameter to procedures and functions. 
This can be particularly useful for returning query results from a stored procedure to a calling application.


*/
CREATE TABLE company (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    department VARCHAR2(50)
);

INSERT INTO company VALUES (1, 'John', 'Doe', 'HR');
INSERT INTO company VALUES (2, 'Jane', 'Smith', 'Finance');
INSERT INTO company VALUES (3, 'Sam', 'Brown', 'IT');
INSERT INTO company VALUES (4, 'Sue', 'Johnson', 'IT');
COMMIT;

select * from company;

--PACKAGE header
CREATE OR REPLACE PACKAGE employee_pkg IS
    TYPE ref_cursor IS REF CURSOR;
    PROCEDURE get_employees(dept IN VARCHAR2, emp_cursor OUT ref_cursor);
END employee_pkg;
/

--PACKAGE body
CREATE OR REPLACE PACKAGE BODY employee_pkg IS
    PROCEDURE get_employees(dept IN VARCHAR2, emp_cursor OUT ref_cursor) IS
    BEGIN
        OPEN emp_cursor FOR
        SELECT employee_id, first_name, last_name
        FROM company
        WHERE department = dept;
    END get_employees;
END employee_pkg;
/

-- Execute the procedure and fetch the results using a script :

SET SERVEROUTPUT ON;
DECLARE
    emp_cursor employee_pkg.ref_cursor;
    emp_id company.employee_id%TYPE;
    fname company.first_name%TYPE;
    lname company.last_name%TYPE;
BEGIN
    -- Call the procedure
    employee_pkg.get_employees('IT', emp_cursor);

    -- Fetch the results
    LOOP
        FETCH emp_cursor INTO emp_id, fname, lname;
        EXIT WHEN emp_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_id || ', Name: ' || fname || ' ' || lname);
    END LOOP;

    -- Close the cursor
    CLOSE emp_cursor;
END;
/


drop table company;
--------------------------------------------------------------------------------

-- Basic Usage of %ROWTYPE :

-- In Oracle PL/SQL, %ROWTYPE is an attribute that provides a record type that represents a row in a table or a view. 

CREATE TABLE company (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    department VARCHAR2(50)
);

INSERT INTO company VALUES (1, 'John', 'Doe', 'HR');
INSERT INTO company VALUES (2, 'Jane', 'Smith', 'Finance');
INSERT INTO company VALUES (3, 'Sam', 'Brown', 'IT');
INSERT INTO company VALUES (4, 'Sue', 'Johnson', 'IT');
COMMIT;

-- Declare a variable using %ROWTYPE :

DECLARE
    emp_record company%ROWTYPE;
BEGIN
    -- Retrieve a row into the emp_record variable
    SELECT *
    INTO emp_record
    FROM company
    WHERE employee_id = 1;
    
    -- Print the fields
    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_record.employee_id);
    DBMS_OUTPUT.PUT_LINE('First Name: ' || emp_record.first_name);
    DBMS_OUTPUT.PUT_LINE('Last Name: ' || emp_record.last_name);
    DBMS_OUTPUT.PUT_LINE('Department: ' || emp_record.department);
END;
/

--------------------------------------------------------------------------------
-- Using %ROWTYPE in a Cursor Loop :

DECLARE
    CURSOR emp_cursor IS
        SELECT *
        FROM company;
        
    emp_record company%ROWTYPE;
BEGIN
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO emp_record;
        EXIT WHEN emp_cursor%NOTFOUND;
        
        -- Print the fields
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_record.employee_id);
        DBMS_OUTPUT.PUT_LINE('First Name: ' || emp_record.first_name);
        DBMS_OUTPUT.PUT_LINE('Last Name: ' || emp_record.last_name);
        DBMS_OUTPUT.PUT_LINE('Department: ' || emp_record.department);
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
    CLOSE emp_cursor;
END;
/


drop table company;
--------------------------------------------------------------------------------

/*
--Records
In Oracle PL/SQL, a record is a composite data structure that allows you to store
multiple related items of different data types as a single unit. 
*/

declare

type emp_record is record(emp_name varchar2(100), salary number, hire_date date);

employee_1 emp_record;
employee_2 emp_record;
employee_3 emp_record;

begin

employee_1.emp_name := 'selva';
employee_1.salary := 6000;
employee_1.hire_date := sysdate;

DBMS_OUTPUT.PUT_LINE('Employee 1 : Name : '||employee_1.emp_name||'Salary :'||employee_1.salary||'Joining date :'||employee_1.hire_date);

employee_2.emp_name := 'Info';
employee_2.salary := 60000;
employee_2.hire_date := sysdate;

DBMS_OUTPUT.PUT_LINE('Employee 2 : Name : '||employee_2.emp_name||'Salary :'||employee_2.salary||'Joining date :'||employee_2.hire_date);


end;
/

--------------------------------------------------------------------------------

select * from employees;

desc employees;
------------------------

declare

type emp_record is record(emp_name varchar2(100), salary number, hire_date date);

employee_1 emp_record;
employee_2 emp_record;

begin

select FIRST_NAME, SALARY, HIRE_DATE into employee_1 from employees where EMPLOYEE_ID = 100;

DBMS_OUTPUT.PUT_LINE('Employee 1 : Name : '||employee_1.emp_name||'Salary :'||employee_1.salary||'Joining date :'||employee_1.hire_date);

select FIRST_NAME, SALARY, HIRE_DATE into employee_2 from employees where EMPLOYEE_ID = 101;

DBMS_OUTPUT.PUT_LINE('Employee 2 : Name : '||employee_2.emp_name||'Salary :'||employee_2.salary||'Joining date :'||employee_2.hire_date);

end;
/

--------------------------------------------------------------------------------
/*
Nested Records :
----------------
Records can also be nested within other records, allowing for more complex data structures.
*/
select * from employees;
select * from departments;
select * from locations;

desc locations;
desc departments;
desc employees;

------------------------
SET SERVEROUTPUT ON;
declare
    type location_record is record(street_addr locations.street_address%type, city locations.city%type);
    
    type employee_record is record(
        emp_name varchar2(100),
        salary number,
        hire_date date,
        department departments%rowtype,
        emp_location location_record
    );
    
    employee_01 employee_record;
    employee_02 employee_record;
    
begin
    employee_01.emp_name := 'selva';
    employee_01.department.department_name := 'Employee';
    employee_01.emp_location.street_addr := 'Dindigul';
    
    DBMS_OUTPUT.PUT_LINE('Employee 1 = Name : '||employee_01.emp_name||'. Department :'||employee_01.department.department_name||'. Street Address :'||employee_01.emp_location.street_addr);


    select first_name, department_name, street_address into employee_02.emp_name, employee_02.department.department_name, employee_02.emp_location.street_addr from employees e, departments d, locations l
        where e.department_id = d.department_id and d.location_id = l.location_id and e.employee_id = 100;
        
    DBMS_OUTPUT.PUT_LINE('Employee 2 = Name : '||employee_02.emp_name||'. Department :'||employee_02.department.department_name||'. Street Address :'||employee_02.emp_location.street_addr);

end;
/

--------------------------------------------------------------------------------
