Introduction To PL/SQL Functions In Oracle Database :
-----------------------------------------------------

		In Oracle Database we can define a PL/SQL function as a self-contained sub-program that is meant 
		to do some specific well defined task. Functions are named PL/SQL block which means they can be stored 
		into the database as a database object and can be reused.
		
Types of PL/SQL functions in Oracle Database :
----------------------------------------------

	There are two types of PL/SQL functions in Oracle Database, these are


			1. Pass-by-Value Functions and
			2. Pass-by-Reference functions
			
Syntax of PL/SQL Functions in Oracle Database :
-----------------------------------------------


				CREATE [OR REPLACE] FUNCTION function_name
				(Parameter 1, Parameter 2…)
				RETURN datatype
				IS
					Declare variable, constant etc.  
				BEGIN
					Executable Statements
					Return (Return Value);
				END;
				
				
_______________________________________________________________________________________________________________________

How To Create PL/SQL Function In Oracle Database :
--------------------------------------------------

PL/SQL function for calculating “Area of the Circle” :
------------------------------------------------------

--Function Header
CREATE OR REPLACE FUNCTION circle_area (radius NUMBER) 
RETURN NUMBER IS
--Declare a constant and a variable
pi  	CONSTANT NUMBER(7,2) :=	3.141;
area 	NUMBER(7,2);
BEGIN
  --Area of Circle pi*r*r;
  area := pi * (radius * radius);
  RETURN area; 
END;
/


How to call the function :
--------------------------

Example 1:
----------

SET SERVEROUTPUT ON;
BEGIN
  DBMS_OUTPUT.PUT_LINE(circle_area(25));
END;
/

Example 2:
----------

SET SERVEROUTPUT ON;
DECLARE
  vr_area NUMBER (7,3);
BEGIN
  vr_area := circle_area(25);
  
  DBMS_OUTPUT.PUT_LINE(vr_area);
END;
/


_______________________________________________________________________________________________________________________

--Pass-by-Value Functions

CREATE OR REPLACE FUNCTION add_numbers(a IN NUMBER, b IN NUMBER)
RETURN NUMBER
IS
    result NUMBER;
BEGIN
    result := a + b;
    RETURN result;
END;
/

-- Example usage of add_numbers function (pass-by-value)
DECLARE
    sum_result NUMBER;
BEGIN
    sum_result := add_numbers(10, 20);
    DBMS_OUTPUT.PUT_LINE('Sum is: ' || sum_result);
END;
/

---------------------------------------------------------------

--Pass-by-Reference Functions
--Here’s an example of a pass-by-reference function using OUT:

CREATE OR REPLACE PROCEDURE multiply_by_two(x IN NUMBER, result OUT NUMBER)
IS
BEGIN
    result := x * 2;
END;
/

-- Example usage of multiply_by_two procedure (pass-by-reference with OUT)
DECLARE
    number_to_multiply NUMBER := 5;
    multiplied_result NUMBER;
BEGIN
    multiply_by_two(number_to_multiply, multiplied_result);
    DBMS_OUTPUT.PUT_LINE('Multiplied result is: ' || multiplied_result);
END;
/

---------------------------------------------------------------
--Pass-by-Reference Functions
--Another example using IN OUT:

CREATE OR REPLACE PROCEDURE increment_value(x IN OUT NUMBER)
IS
BEGIN
    x := x + 1;
END;
/

-- Example usage of increment_value procedure (pass-by-reference with IN OUT)
DECLARE
    number_to_increment NUMBER := 10;
BEGIN
    increment_value(number_to_increment);
    DBMS_OUTPUT.PUT_LINE('Incremented value is: ' || number_to_increment);
END;
/
