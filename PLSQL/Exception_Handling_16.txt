/*
 Exception handling in PL/SQL :
 ------------------------------
 
1.  Exception: An error or unexpected condition that disrupts the normal flow of program execution.
2.  Predefined Exceptions: These are standard exceptions defined by PL/SQL, such as NO_DATA_FOUND or TOO_MANY_ROWS.
3.  User-defined Exceptions: These are custom exceptions defined by the user.

Structure of Exception Handling :
---------------------------------

DECLARE
   -- Declare variables and exceptions
BEGIN
   -- Execute main logic
EXCEPTION
   WHEN exception1 THEN
      -- Handle exception1
   WHEN exception2 THEN
      -- Handle exception2
   WHEN OTHERS THEN
      -- Handle all other exceptions
END;

*/
/*
Example 1: Handling Predefined Exceptions :
-------------------------------------------
This example demonstrates handling a ' NO_DATA_FOUND ' exception.
*/

DECLARE
   v_employee_name VARCHAR2(50);
BEGIN
   -- Attempt to select a record that may not exist
   SELECT first_name INTO v_employee_name
   FROM employees
   WHERE employee_id = 99999; -- Assuming this ID doesn't exist
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No employee found with the specified ID.');
END;
/

--------------------------------------------------------------------------------

/*
Example 2: Handling Multiple Exceptions :
-----------------------------------------
This example handles multiple predefined exceptions: NO_DATA_FOUND and TOO_MANY_ROWS.
*/

SET SERVEROUTPUT ON
DECLARE
   v_employee_name VARCHAR2(50);
BEGIN
   -- Attempt to select a record
   SELECT first_name INTO v_employee_name
   FROM employees
   WHERE department_id = 10; -- Assuming this might return multiple rows
   DBMS_OUTPUT.PUT_LINE('first_name :'||v_employee_name);
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No employee found in the specified department.');
   WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('More than one employee found in the specified department.');
END;
/

--------------------------------------------------------------------------------
/*
Example 3: User-defined Exceptions :
------------------------------------
This example defines and handles a custom exception.
*/

DECLARE
   e_salary_too_high EXCEPTION;
   v_salary employees.salary%TYPE;
BEGIN
   SELECT salary INTO v_salary
   FROM employees
   WHERE employee_id = 100; -- Example employee ID
   
   IF v_salary > 10000 THEN
      RAISE e_salary_too_high;
   END IF;
   
   DBMS_OUTPUT.PUT_LINE('Salary :'||v_salary);
EXCEPTION
   WHEN e_salary_too_high THEN
      DBMS_OUTPUT.PUT_LINE('Salary is too high!');
END;
/

--------------------------------------------------------------------------------
/*
Example 4: Using the OTHERS Handler
This example demonstrates using the OTHERS handler to catch any exceptions not explicitly handled.
*/
SET SERVEROUTPUT ON
DECLARE
   v_employee_name VARCHAR2(50);
BEGIN
   -- Attempt to select a record
   SELECT first_name INTO v_employee_name
   FROM employees
   WHERE DEPARTMENT_ID = 10; -- 20
   
   DBMS_OUTPUT.PUT_LINE('first_name :'||v_employee_name);

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('No employee found with the specified ID.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

/*
Notes
SQLERRM: A function that returns the error message associated with the most recent exception.
RAISE: A statement used to explicitly raise an exception.
*/
--------------------------------------------------------------------------------

SET SERVEROUTPUT ON;
DECLARE
  var_dividend NUMBER := 24;
  var_divisor NUMBER := 0;
  var_result NUMBER;
  
BEGIN

  var_result := var_dividend/var_divisor;
  DBMS_OUTPUT.PUT_LINE('Result = ' ||var_result);
  
EXCEPTION   
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------

/*

-- RAISE_APPLICATION_ERROR :
----------------------------
RAISE_APPLICATION_ERROR is a built-in procedure that allows you to create and raise custom error messages
and associate them with specific error numbers. 
This is useful for reporting application-specific errors to the user or the calling environment.

Syntax
------

RAISE_APPLICATION_ERROR(error_number, message);

error_number: A negative integer between -20000 and -20999.
message: A string message up to 2048 bytes.

*/

SET SERVEROUTPUT ON;
DECLARE
   v_salary employees.salary%TYPE;
BEGIN
   SELECT salary INTO v_salary
   FROM employees
   WHERE employee_id = 100; -- Example employee ID
   
   IF v_salary > 10000 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Salary exceeds the maximum limit');
   END IF;
   
   DBMS_OUTPUT.PUT_LINE('salary = ' ||v_salary);

EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

--------------------------------------------------------------------------------
/*

-- PRAGMA EXCEPTION_INIT :
--------------------------
PRAGMA EXCEPTION_INIT is a compiler directive that associates a user-defined exception with an Oracle error number. 
This allows you to handle Oracle errors using named exceptions instead of relying on error codes.


Declare a User-defined Exception and Associate it with an Error Number
----------------------------------------------------------------------
*/

DECLARE
   e_high_salary EXCEPTION;
   PRAGMA EXCEPTION_INIT(e_high_salary, -20001); -- Associate with custom error number
   
   v_salary employees.salary%TYPE;
BEGIN
   SELECT salary INTO v_salary
   FROM employees
   WHERE employee_id = 100; -- Example employee ID
   
   IF v_salary > 10000 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Salary exceeds the maximum limit');
   END IF;
EXCEPTION
   WHEN e_high_salary THEN
      DBMS_OUTPUT.PUT_LINE('Custom Error: Salary is too high.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

/*

Associating with Standard Oracle Error
You can also use PRAGMA EXCEPTION_INIT to handle standard Oracle errors with custom exceptions.

*/
DECLARE
   e_dup_val_on_index EXCEPTION;
   PRAGMA EXCEPTION_INIT(e_dup_val_on_index, -00001); -- Associate with Oracle error for unique constraint violation
   
BEGIN
   -- Attempt to insert a duplicate value
   INSERT INTO employees (employee_id, first_name, last_name)
   VALUES (100, 'John', 'Doe');
EXCEPTION
   WHEN e_dup_val_on_index THEN
      DBMS_OUTPUT.PUT_LINE('Duplicate value found, violating unique constraint.');
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/*
In this case, the e_dup_val_on_index exception is associated with the standard Oracle error -00001, which is raised when there is a unique constraint violation.

Summary
-------
1. RAISE_APPLICATION_ERROR: Allows you to raise custom errors with specific error messages and numbers,
providing better control over error handling in your applications.

2. PRAGMA EXCEPTION_INIT: Links user-defined exceptions with specific Oracle error numbers,
allowing you to handle standard or custom errors more intuitively using named exceptions.

*/

--------------------------------------------------------------------------------

